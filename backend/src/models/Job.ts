import mongoose, { Document, Schema } from "mongoose";

// Job type and currency enums
export type JobType = "intern" | "intern+ppo" | "fulltime";
export type Currency = "INR" | "USD";

// Compensation interface
export interface ICompensation {
  amount: string;
  currency: Currency;
}

// Application interface
export interface IApplication {
  _id?: mongoose.Types.ObjectId;
  applicant: mongoose.Types.ObjectId;
  appliedAt: Date;
  resumeFile?: string;
  coverLetter?: string;
  status:
    | "pending"
    | "reviewed"
    | "accepted"
    | "rejected"
    | "shortlisted"
    | "hired";
}

// Job posting interface
export interface IJob extends Document {
  _id: string;
  role: string; // required
  company: string; // required
  type: JobType; // required
  workExperience: string; // required
  internExperience: string; // required
  duration: string; // required
  compensation: ICompensation; // required
  postedBy: mongoose.Types.ObjectId; // required - reference to User
  postedAt: Date; // auto-generated by timestamps
  description?: string; // optional
  requirements?: string[]; // optional array of strings
  benefits?: string[]; // optional array of strings
  applications?: IApplication[]; // optional array of applications
  isActive: boolean; // for soft delete/archiving
  createdAt: Date; // auto-generated by timestamps
  updatedAt: Date; // auto-generated by timestamps
}

// Compensation schema
const CompensationSchema = new Schema<ICompensation>(
  {
    amount: {
      type: String,
      required: [true, "Compensation amount is required"],
      trim: true,
    },
    currency: {
      type: String,
      enum: ["INR", "USD"],
      required: [true, "Currency is required"],
    },
  },
  { _id: false }
);

// Job posting schema
const JobSchema = new Schema<IJob>(
  {
    role: {
      type: String,
      required: [true, "Job role is required"],
      trim: true,
      maxlength: [100, "Job role cannot exceed 100 characters"],
    },
    company: {
      type: String,
      required: [true, "Company name is required"],
      trim: true,
      maxlength: [100, "Company name cannot exceed 100 characters"],
    },
    type: {
      type: String,
      enum: ["intern", "intern+ppo", "fulltime"],
      required: [true, "Job type is required"],
    },
    workExperience: {
      type: String,
      required: [true, "Work experience requirement is required"],
      trim: true,
      maxlength: [200, "Work experience cannot exceed 200 characters"],
    },
    internExperience: {
      type: String,
      required: [true, "Intern experience requirement is required"],
      trim: true,
      maxlength: [200, "Intern experience cannot exceed 200 characters"],
    },
    duration: {
      type: String,
      required: [true, "Job duration is required"],
      trim: true,
      maxlength: [100, "Duration cannot exceed 100 characters"],
    },
    compensation: {
      type: CompensationSchema,
      required: [true, "Compensation details are required"],
    },
    postedBy: {
      type: Schema.Types.ObjectId,
      ref: "User",
      required: [true, "Posted by user ID is required"],
    },
    description: {
      type: String,
      trim: true,
      maxlength: [2000, "Description cannot exceed 2000 characters"],
    },
    requirements: [
      {
        type: String,
        trim: true,
        maxlength: [200, "Each requirement cannot exceed 200 characters"],
      },
    ],
    benefits: [
      {
        type: String,
        trim: true,
        maxlength: [200, "Each benefit cannot exceed 200 characters"],
      },
    ],
    applications: [
      {
        _id: {
          type: Schema.Types.ObjectId,
          auto: true,
        },
        applicant: {
          type: Schema.Types.ObjectId,
          ref: "User",
          required: true,
        },
        appliedAt: {
          type: Date,
          default: Date.now,
        },
        resumeFile: {
          type: String,
          trim: true,
        },
        coverLetter: {
          type: String,
          trim: true,
          maxlength: [1000, "Cover letter cannot exceed 1000 characters"],
        },
        status: {
          type: String,
          enum: [
            "pending",
            "reviewed",
            "accepted",
            "rejected",
            "shortlisted",
            "hired",
          ],
          default: "pending",
        },
      },
    ],
    isActive: {
      type: Boolean,
      default: true,
    },
  },
  {
    timestamps: true, // This adds createdAt and updatedAt automatically
    toJSON: { virtuals: true },
    toObject: { virtuals: true },
  }
);

// Indexes for better query performance
JobSchema.index({ company: 1 });
JobSchema.index({ type: 1 });
JobSchema.index({ postedBy: 1 });
JobSchema.index({ isActive: 1 });
JobSchema.index({ createdAt: -1 });
JobSchema.index({ role: "text", company: "text", description: "text" }); // Text search index
JobSchema.index({ "applications.applicant": 1 }); // For finding user applications

// Virtual for id (to match frontend interface)
JobSchema.virtual("id").get(function () {
  return this._id.toString();
});

// Virtual for postedAt (to match frontend interface)
JobSchema.virtual("postedAt").get(function () {
  return this.createdAt
    ? this.createdAt.toISOString()
    : new Date().toISOString();
});

// Ensure virtual fields are serialized
JobSchema.set("toJSON", {
  virtuals: true,
  transform: function (doc, ret: any) {
    ret.id = ret._id;
    ret.postedAt = ret.createdAt;
    delete ret._id;
    delete ret.__v;
    return ret;
  },
});

// Pre-save middleware to validate postedBy reference
JobSchema.pre("save", async function (next) {
  if (this.isModified("postedBy")) {
    try {
      const User = mongoose.model("User");
      const user = await User.findById(this.postedBy);
      if (!user) {
        throw new Error("Referenced user does not exist");
      }
    } catch (error) {
      console.error("Error validating postedBy field:", error);
      next(error as Error);
      return;
    }
  }
  next();
});

// Create and export the model
const Job = mongoose.model<IJob>("Job", JobSchema);

export default Job;
