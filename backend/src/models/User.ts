import mongoose, { Document, Schema } from "mongoose";

// User role type
export type UserRole = "pending" | "admin" | "alumni" | "student";

// User interface
export interface IUser extends Document {
  _id: string;
  name: string; // required
  email: string; // required
  graduationYear?: number; // optional
  avatar: string; // required
  role: UserRole; // pending (default), admin, alumni, student
  company?: string; // optional
  position?: string; // optional
  createdAt: Date; // auto-generated by timestamps
  updatedAt: Date; // auto-generated by timestamps
}

// User schema
const UserSchema = new Schema<IUser>(
  {
    name: {
      type: String,
      required: [true, "Name is required"],
      trim: true,
      maxlength: [100, "Name cannot exceed 100 characters"],
    },
    email: {
      type: String,
      required: [true, "Email is required"],
      unique: true,
      lowercase: true,
      trim: true,
      match: [
        /^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/,
        "Please enter a valid email",
      ],
    },
    graduationYear: {
      type: Number,
      min: [1900, "Graduation year must be after 1900"],
      max: [
        new Date().getFullYear() + 10,
        "Graduation year cannot be more than 10 years in the future",
      ],
    },
    avatar: {
      type: String,
      required: [true, "Avatar is required"],
      trim: true,
    },
    role: {
      type: String,
      enum: ["pending", "admin", "alumni", "student"],
      default: "pending",
    },
    company: {
      type: String,
      trim: true,
      maxlength: [100, "Company name cannot exceed 100 characters"],
    },
    position: {
      type: String,
      trim: true,
      maxlength: [100, "Position cannot exceed 100 characters"],
    },
  },
  {
    timestamps: true, // This adds createdAt and updatedAt automatically
    toJSON: { virtuals: true },
    toObject: { virtuals: true },
  }
);

// Index for better query performance
UserSchema.index({ email: 1 });
UserSchema.index({ role: 1 });
UserSchema.index({ createdAt: -1 });

// Virtual for id (to match frontend interface)
UserSchema.virtual("id").get(function () {
  return this._id.toString();
});

// Ensure virtual fields are serialized
UserSchema.set("toJSON", {
  virtuals: true,
  transform: function (doc, ret: any) {
    ret.id = ret._id;
    delete ret._id;
    delete ret.__v;
    return ret;
  },
});

// Create and export the model
const User = mongoose.model<IUser>("User", UserSchema);

export default User;
